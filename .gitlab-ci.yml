variables:
  APP_HOST: 0.0.0.0
  APP_PORT: 8888
  FLASK_ENV: production
  FLASK_DEBUG: False
  IMAGE_TAG: lucaslemo/flask:1.0.0
  # DATABASE_TEST_URL: sqlite:////builds/root/todo_list/todo_project/todo_project/tests/test.db
  DATABASE_TEST_URL: 'sqlite:///:memory:'

stages:
  - build
  - image_scan
  - app_test
  - deploy
  - cleanup

build_job:
  stage: build
  image: docker:27.2.1
  services:
    - docker:27.2.1-dind
  script:
    - docker build --build-arg PORT=$APP_PORT -t $IMAGE_TAG -f ./docker/flask/Dockerfile .

trivy_job:
  stage: image_scan
  image: docker:27.2.1
  services:
    - docker:27.2.1-dind
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy image --ignore-unfixed --severity HIGH,CRITICAL $IMAGE_TAG

test_job:
  stage: app_test
  image: python:3.10.15-slim
  services:
    - docker:27.2.1-dind
  before_script:
    - rm -rf .pytest_cache
    - rm -rf .cache/pip
    - export FLASK_ENV="testing"
    - export DATABASE_URL="$DATABASE_TEST_URL"
    - pip install --no-cache-dir --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
    - pip install --no-cache-dir python-dotenv
    - pip install --no-cache-dir pytest
  script:
    - pytest todo_project/todo_project/tests/test_app.py -p no:cacheprovider

deploy_job:
  stage: deploy
  image: docker:27.2.1
  services:
    - docker:27.2.1-dind
  before_script:
    - touch .env
    - echo "FLASK_ENV=$FLASK_ENV" >> .env
    - echo "FLASK_DEBUG=$FLASK_DEBUG" >> .env
    - echo "SECRET_KEY=$SECRET_KEY" >> .env
    - echo "DATABASE_URL=$DATABASE_URL" >> .env
    - echo "APP_PORT=$APP_PORT" >> .env
    - echo "APP_HOST=$APP_HOST" >> .env
    - docker compose down
    - PORT_CONTAINERS=$(docker ps --filter "publish=$APP_PORT" -q)
    - if [ -n "$PORT_CONTAINERS" ]; then docker stop $PORT_CONTAINERS; docker rm $PORT_CONTAINERS; sleep 5; fi
  script:
    - docker compose up -d

cleanup_job:
  stage: cleanup
  script:
    - rm -rf "%CACHE_PATH%/%CI_PIPELINE_ID%"
  when: always